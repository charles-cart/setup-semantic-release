# .github/workflows/release.yml
# Workflow simple y efectivo para Semantic Release

name: release
run-name: release

# Se ejecuta cuando se hace push a master o manualmente
on:
  push:
    branches:
      - master
      - main
  workflow_dispatch: # Permite ejecutar manualmente

jobs:
  # Job principal de release
  release:
    runs-on: ubuntu-latest
    
    steps:
      # 1. Checkout del código
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Necesario para semantic-release (historial completo)
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # 2. Configurar Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm' # Cache de dependencias para mayor velocidad
      
      # 3. Instalar dependencias
      - run: npm ci # Más rápido y determinista que npm install
      
      # 4. Build del proyecto
      - run: npm run build
      
      # 5. Ejecutar semantic-release
      - run: npx semantic-release

  # Job opcional: sincronizar rama staging después del release
  refresh-staging:
    needs: release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' # Solo si el push fue a master
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Merge master into staging
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git checkout staging
          git pull origin master --no-ff --no-edit
          git push origin staging

# EXPLICACIÓN DEL WORKFLOW SIMPLIFICADO:

# ¿Por qué esta versión es mejor?
# ✅ Sin lint/test obligatorios que pueden fallar
# ✅ Mantiene lo esencial: build y release
# ✅ Más rápido y menos propenso a errores
# ✅ Basado en workflows que ya funcionan

# Triggers:
# - push a master/main: Release automático
# - workflow_dispatch: Permite ejecutar manualmente desde GitHub

# Pasos esenciales:
# 1. Checkout: Obtiene el código con historial completo
# 2. Setup Node: Configura el entorno de Node.js
# 3. Install: Instala dependencias de forma determinista
# 4. Build: Compila el proyecto (necesario para validar)
# 5. Release: Ejecuta semantic-release

# Consideraciones:
# - fetch-depth: 0 es crucial para que semantic-release vea todo el historial
# - npm ci es más rápido que npm install en CI
# - No incluye lint/test para evitar fallos innecesarios
# - Mantiene el job de staging sync si ya lo usas
